1. Data Preparation:
Gather Dataset: Ensure you have a labeled dataset of chest X-ray images with two categories - pneumonia and normal.
Preprocessing: Resize images to a consistent size, normalize pixel values (usually to the range [0, 1]), and potentially apply data augmentation to increase dataset diversity and reduce overfitting.

2. Split the Dataset:
Train-Test Split: Divide your data into a training set (typically about 80% of the data) and a test set (the remaining 20%).
Validation Set: Optionally, you can also create a validation set from the training set (e.g., 20% of the training set) for model tuning.

3. Define the CNN Model:
Use tf.keras to define a CNN. The model might consist of several convolutional layers (Conv2D) with activation functions (like ReLU), followed by pooling layers (MaxPooling2D), and fully connected layers (Dense) at the end.
For binary classification (pneumonia vs. normal), your output layer should have one neuron with a sigmoid activation function.

4. Compile the Model:
Choose an optimizer (like Adam or SGD), a loss function (binary cross-entropy for binary classification), and metrics (like accuracy).

5. Train the Model:
Fit the model to the training data, using the validation set to fine-tune the hyperparameters.
Use callbacks like ModelCheckpoint and EarlyStopping to prevent overfitting and save the best model.

6. Evaluate the Model:
After training, evaluate the model's performance on the test set.
Consider metrics like accuracy, precision, recall, and the AUC-ROC curve, as these are important in medical image analysis.

7. Fine-Tuning and Adjustments:
Depending on the model performance, you might need to adjust the architecture, hyperparameters, or data preprocessing.
You can also try using pre-trained models (like VGG16, ResNet) and fine-tuning them on your dataset (transfer learning).